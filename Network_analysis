#!/usr/bin/env python
# coding: utf-8
"""
Network diagram of correlation matrix with cluster-based layout.

Features
--------
* Reads correlation matrix (Excel/CSV) + optional Alpha transparency sheet.
* Keeps only edges |r| > THRESH and involving nodes containing 'D' or 'R'.
* Manual x-positions for clusters: Input (-2), Process (0), Output (+2).
* Edge styling by sign & strength; node colour by cluster; node alpha by sheet.
* Exports high-resolution SVG + PDF.

Author  : <Your Name>
Created : 2025-07-10
Python  : ≥3.9
"""

# ======================================================================
# 0 · Imports & global settings
# ======================================================================

from __future__ import annotations

import argparse
import re
from pathlib import Path

import numpy as np
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
from matplotlib.patches import FancyArrowPatch  # noqa: F401 (future use)

plt.rcParams.update(
    {
        "font.family": "serif",
        "axes.spines.left": False,
        "axes.spines.right": False,
        "axes.spines.top": False,
        "axes.spines.bottom": False,
        "figure.dpi": 150,
    }
)

THRESH = 0.5  # |r| threshold


# ======================================================================
# 1 · Helper functions
# ======================================================================


def format_param(name: str) -> str:
    """Convert '^' and '_' into LaTeX-style notation for tick-safe labels."""
    name = re.sub(r"\^(?!{)(\S+)", r"^{\1}", name)
    name = re.sub(r"_(?!{)(\S+)", r"_{\1}", name)
    return f"${name}$"


def manual_layout(
    nodes: list[str],
    clusters: dict[str, str],
    x_map: dict[str, float] | None = None,
    y_span: tuple[float, float] = (-1.5, 1.5),
) -> dict[str, tuple[float, float]]:
    """Return fixed positions by cluster (alphabetical order within cluster)."""
    x_map = x_map or {"Input": -2.0, "Process": 0.0, "Output": 2.0}
    buckets: dict[str, list[str]] = {}
    for n in nodes:
        buckets.setdefault(clusters[n], []).append(n)

    pos: dict[str, tuple[float, float]] = {}
    for cl, nodelist in buckets.items():
        nodelist.sort()
        y_top, y_bot = y_span
        ys = np.linspace(y_top, y_bot, len(nodelist)) if len(nodelist) > 1 else [
            np.mean(y_span)
        ]
        for y, node in zip(ys, nodelist):
            pos[node] = (x_map.get(cl, 0.0), y)
    return pos


def load_matrix(path: Path) -> pd.DataFrame:
    """Read correlation matrix (first sheet) from Excel/CSV."""
    if path.suffix.lower() == ".xlsx":
        return pd.read_excel(path, sheet_name=0, index_col=0)
    if path.suffix.lower() == ".csv":
        return pd.read_csv(path, index_col=0)
    raise ValueError("Use .xlsx or .csv for correlation matrix")


def load_alpha(path: Path | None, index_like: pd.Index) -> pd.Series:
    """Load Alpha column; default 0.5 for missing nodes."""
    if path is None:
        return pd.Series(0.5, index=index_like, dtype=float)

    if path.suffix.lower() != ".xlsx":
        raise ValueError("--alpha must be an Excel file with an 'Alpha' column")

    alpha_raw = pd.read_excel(path, sheet_name=0, index_col=0)["Alpha"]
    alpha = alpha_raw.reindex(index_like).fillna(0.5).astype(float)
    return alpha


# ======================================================================
# 2 · Main routine
# ======================================================================


def main(mat_path: Path, alpha_path: Path | None, out_dir: Path) -> None:
    out_dir.mkdir(parents=True, exist_ok=True)

    corr = load_matrix(mat_path)
    alpha = (
        load_alpha(alpha_path, corr.index)
        if alpha_path
        else load_alpha(mat_path, corr.index)  # try same Excel sheet
    )

    # ------------------ build graph ------------------
    G = nx.Graph()
    G.add_nodes_from(corr.index)

    for i, u in enumerate(corr.index):
        for j in range(i + 1, len(corr)):
            v = corr.index[j]
            r = corr.loc[u, v]
            if abs(r) > THRESH:
                G.add_edge(u, v, weight=r)

    # keep only edges involving D or R
    for u, v in list(G.edges()):
        if "D" not in (u, v) and "R" not in (u, v):
            G.remove_edge(u, v)

    # ------------------ cluster mapping ------------------
    input_nodes = {
        "S_Ac",
        "S_Pr",
        "S_Val",
        "S_But",
        "N_in",
        "P_in",
        "HB/HV_in",
        "PHA_in",
    }
    process_nodes = {
        "N_uptake",
        "P_uptake",
        "F/X",
        "HB/HV_prod",
        "PHA_prod",
        "Y_S",
        "VP",
        "Y_X",
    }
    output_nodes = {"HB/HV_end", "PHA_end", "D", "R", "ΔT", "deltaT"}

    cluster = {}
    for n in G.nodes:
        if n in input_nodes:
            cluster[n] = "Input"
        elif n in process_nodes:
            cluster[n] = "Process"
        elif n in output_nodes:
            cluster[n] = "Output"
        else:
            cluster[n] = "Process"

    colours = {"Input": "tab:red", "Process": "tab:blue", "Output": "tab:green"}
    pos = manual_layout(list(G.nodes), cluster)

    # ------------------ plot ------------------
    fig, ax = plt.subplots(figsize=(6, 4.5), dpi=300)
    ax.axis("off")

    # nodes
    for n in G.nodes:
        ax.scatter(
            *pos[n],
            s=1200,
            color=colours[cluster[n]],
            edgecolor="black",
            alpha=alpha[n],
            zorder=3,
        )
        ax.text(
            *pos[n],
            format_param(n),
            ha="center",
            va="center",
            fontsize=8.5,
            color="black",
            zorder=4,
        )

    # edges
    for u, v, d in G.edges(data=True):
        r = d["weight"]
        lw = 0.5 if abs(r) < 0.75 else 1.0
        ecolor = "tab:blue" if r >= 0 else "tab:red"
        cu, cv = cluster[u], cluster[v]
        style = "dashed" if {cu, cv} == {"Input", "Output"} else "solid"
        nx.draw_networkx_edges(
            G,
            pos,
            ax=ax,
            edgelist=[(u, v)],
            width=lw,
            edge_color=ecolor,
            style=style,
            connectionstyle="arc3,rad=0.2",
            alpha=1.0,
        )

    # legend
    legend_elems = [
        Line2D([0], [0], marker="o", color="w", markeredgecolor="black", label="Input", markerfacecolor=colours["Input"], markersize=9),
        Line2D([0], [0], marker="o", color="w", markeredgecolor="black", label="Process", markerfacecolor=colours["Process"], markersize=9),
        Line2D([0], [0], marker="o", color="w", markeredgecolor="black", label="Output", markerfacecolor=colours["Output"], markersize=9),
        Line2D([0], [0], color="tab:blue", lw=2, label="r > 0"),
        Line2D([0], [0], color="tab:red",  lw=2, label="r < 0"),
        Line2D([0], [0], color="black", lw=2, linestyle="dashed", label="Input–Output"),
        Line2D([0], [0], color="black", lw=2, linestyle="solid",  label="Other links"),
    ]
    ax.legend(
        handles=legend_elems,
        loc="lower center",
        bbox_to_anchor=(0.5, -0.08),
        ncol=4,
        fontsize=7,
        frameon=False,
    )

    # save
    svg_path = out_dir / "network_diagram.svg"
    pdf_path = out_dir / "network_diagram.pdf"
    fig.savefig(svg_path, format="svg", bbox_inches="tight")
    fig.savefig(pdf_path, format="pdf", bbox_inches="tight")
    print(f"✔ Diagram saved → {svg_path.name}, {pdf_path.name}")


# ======================================================================
# 3 · CLI
# ======================================================================

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Correlation network diagram")
    parser.add_argument("matrix", type=str, help="Correlation matrix (.xlsx / .csv)")
    parser.add_argument(
        "--alpha",
        type=str,
        help="Optional Excel with 'Alpha' column for node transparency",
    )
    parser.add_argument(
        "--out",
        type=str,
        default="fig_output",
        help="Output directory for figures",
    )
    args = parser.parse_args()

    main(Path(args.matrix), Path(args.alpha) if args.alpha else None, Path(args.out))
