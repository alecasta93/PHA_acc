%reset -f
import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
from google.colab import files
import re
from matplotlib.lines import Line2D
from matplotlib.patches import Patch

def format_param(name):
    """
   Converts '^' and '_' to LaTeX notation.
    """
    name = re.sub(r"\^(?!{)(\S+)", r"^{\1}", name)
    name = re.sub(r"_(?!{)(\S+)", r"_{\1}", name)
    return f"${name}$"

def manual_layout_by_cluster(nodes, cluster_mapping, x_positions, y_range=(-1, 1)):
    """
    Calculate a manual layout by fixing the position of nodes based on their cluster.

    - nodes: list of nodes.
    - cluster_mapping: dictionary {node: 'Input'/'Process'/'Output'}.
    - x_positions: dictionary {cluster: x} (e.g. {'Input': -2, 'Process': 0, 'Output': 2}).
    - y_range: range (min, max) to vertically distribute nodes in each cluster.

    Returns a dictionary {node: (x, y)}.
    """
    pos = {}
    clusters = {}
    for n in nodes:
        # If a node is not present in cluster_mapping, we default it to 'Process'
        cluster = cluster_mapping.get(n, 'Process')
        clusters.setdefault(cluster, []).append(n)
    for cluster, node_list in clusters.items():
        node_list.sort()  # alphabetical order for reproducibility
        n = len(node_list)
        ymin, ymax = y_range
        if n == 1:
            ys = [(ymin + ymax) / 2]
        else:
            ys = np.linspace(ymax, ymin, n)
        x = x_positions.get(cluster, 0)
        for node, y in zip(node_list, ys):
            pos[node] = (x, y)
    return pos

# ------------------- Loading data -------------------
print("Upload the file containing the correlation matrix (Excel or CSV):")
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Load correlation matrix from first sheet (default)
if filename.lower().endswith('.xlsx'):
    df = pd.read_excel(filename, sheet_name=0, index_col=0)
elif filename.lower().endswith('.csv'):
    df = pd.read_csv(filename, index_col=0)
else:
    raise ValueError("Format not supported. Use CSV or Excel.")

print("First rows of the correlation matrix:")
print(df.head())

# Load Alpha values ​​from sheet "Foglio2"
if filename.lower().endswith('.xlsx'):
    alpha_df = pd.read_excel(filename, sheet_name="Foglio2", index_col=0)
    # Make sure the column is called "Alpha"
else:
    raise ValueError("CSV file does not support multiple sheets. Use Excel for Alpha values.")

print("Alpha values ​​(first rows):")
print(alpha_df.head())

# ------------------- Graph construction -------------------
G = nx.Graph()
nodes = list(df.index)
G.add_nodes_from(nodes)

# Set threshold to include an arc: |r| > 0.5
threshold = 0.5
for i, u in enumerate(nodes):
    for j in range(i+1, len(nodes)):
        v = nodes[j]
        r_val = df.loc[u, v]
        if abs(r_val) > threshold:
            G.add_edge(u, v, weight=r_val)

# ------------------- Filtering: Keep only arcs involving D or R -------------------
for (u, v) in list(G.edges()):
    if 'D' not in (u, v) and 'R' not in (u, v):
        G.remove_edge(u, v)

# ------------------- Cluster Definition -------------------
input_nodes = ['S_Ac', 'S_Pr', 'S_Val', 'S_But', 'N_in', 'P_in', 'HB/HV_in', 'PHA_in']
process_nodes = ['N_uptake', 'P_uptake', 'F/X', 'HB/HV_prod', 'PHA_prod', 'Y_S', 'VP', 'Y_X']
output_nodes = ['HB/HV_end', 'PHA_end', 'D', 'R', 'ΔT', 'deltaT']

cluster_mapping = {}
for n in nodes:
    if n in input_nodes:
        cluster_mapping[n] = 'Input'
    elif n in process_nodes:
        cluster_mapping[n] = 'Process'
    elif n in output_nodes:
        cluster_mapping[n] = 'Output'
    else:
        cluster_mapping[n] = 'Process'

# ------------------- Defining fixed positions for clusters -------------------
x_positions = {'Input': -2, 'Process': 0, 'Output': 2}
pos_manual = manual_layout_by_cluster(nodes, cluster_mapping, x_positions, y_range=(-1.5, 1.5))

# ------------------- Set node colors based on cluster -------------------
color_map = {'Input': 'tab:red', 'Process': 'tab:blue', 'Output': 'tab:green'}

# ------------------- Assign transparency (alpha) to nodes from the sheet "Foglio2" -------------------
node_alpha = {}
for n in nodes:
    try:
        node_alpha[n] = float(alpha_df.loc[n, "Alpha"])
    except KeyError:
        # If the node has no defined value, assign a default, for example 0.5
        node_alpha[n] = 0.5

# ------------------- Graph drawing -------------------
plt.figure(figsize=(12,9), dpi=300)

# Draw nodes individually to set transparency
for node in nodes:
    nx.draw_networkx_nodes(
        G, pos_manual, nodelist=[node],
        node_size=2000,
        node_color=[color_map[cluster_mapping[node]]],
        edgecolors='black',
        alpha=node_alpha[node]
    )

nx.draw_networkx_labels(
    G, pos_manual,
    labels={n: format_param(n) for n in nodes},
    font_size=9, font_color='black'
)

# Drawing arcs with conditional styles and curves:
# - If |r| < 0.75, width = 0.1; otherwise, width = 0.5.
# - If nodes are in "Input" and "Output" clusters, the arc is dashed, otherwise solid.
for (u, v, d) in G.edges(data=True):
    r = d['weight']
    abs_r = abs(r)
    width = 0.5 if abs_r < 0.75 else 1
    edge_color = 'tab:blue' if r >= 0 else 'tab:red'

    cluster_u = cluster_mapping[u]
    cluster_v = cluster_mapping[v]
    if cluster_u != cluster_v and set([cluster_u, cluster_v]) == {'Input', 'Output'}:
        style = 'dashed'
    else:
        style = 'solid'

    nx.draw_networkx_edges(
        G, pos_manual, edgelist=[(u, v)],
        width=width,
        edge_color=edge_color,
        style=style,
        connectionstyle='arc3, rad=0.2',
        alpha=1
    )

# ------------------- Creating the legend -------------------
# We create lines and patches to explain the colors of the nodes and arcs
legend_elements = [
    # Nodes (circles)
    Line2D([0], [0], marker='o', color='w', label='Input',
           markerfacecolor='tab:red', markeredgecolor='black',
           markersize=10),
    Line2D([0], [0], marker='o', color='w', label='Process',
           markerfacecolor='tab:blue', markeredgecolor='black',
           markersize=10),
    Line2D([0], [0], marker='o', color='w', label='Output',
           markerfacecolor='tab:green', markeredgecolor='black',
           markersize=10),

    # Arcs for positive/negative correlations
    Line2D([0], [0], color='tab:blue', lw=2, label='r > 0'),
    Line2D([0], [0], color='tab:red', lw=2, label='r < 0'),

    # Dashed vs solid style
    Line2D([0], [0], color='black', lw=2, linestyle='dashed', label='Input–Output'),
    Line2D([0], [0], color='black', lw=2, linestyle='solid', label='Input–Process/Process–Output')
]

plt.legend(
    handles=legend_elements,
    loc='lower center',          
    bbox_to_anchor=(0.5, -0.05), 
    ncol=3,                      
    fontsize=8
)

plt.axis('off')

# Save the figure as SVG and start downloading
plt.savefig("network_diagram.svg", format="svg", bbox_inches="tight")
from google.colab import files
files.download("network_diagram.svg")
plt.show()
